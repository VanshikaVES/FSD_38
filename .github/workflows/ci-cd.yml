name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  FRONTEND_DIR: '.'
  BACKEND_DIR: 'backend'

jobs:
  # Frontend CI/CD
  frontend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.FRONTEND_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linter
      run: npm run lint
      continue-on-error: true

    - name: Run type checking
      run: npx tsc --noEmit
      continue-on-error: true

    - name: Build frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build-${{ github.sha }}
        path: dist/
        retention-days: 7

    - name: Comment PR with frontend build status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${status} Frontend build ${'${{ job.status }}' === 'success' ? 'completed successfully' : 'failed'}!`
          })

  # Backend CI/CD
  backend-ci:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.BACKEND_DIR }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: ${{ env.BACKEND_DIR }}/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npx eslint . --ext .js
      continue-on-error: true

    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/hospital-appointment-test

    - name: Generate test coverage
      run: npm run test:coverage
      continue-on-error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.sha }}
        path: |
          ${{ env.BACKEND_DIR }}/coverage/
          ${{ env.BACKEND_DIR }}/test-results/
        retention-days: 7

    - name: Upload backend artifacts
      uses: actions/upload-artifact@v4
      with:
        name: backend-build-${{ github.sha }}
        path: ${{ env.BACKEND_DIR }}/
        retention-days: 7

    - name: Comment PR with backend test status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${status} Backend tests ${'${{ job.status }}' === 'success' ? 'passed successfully' : 'failed'}!`
          })

  # Deploy to Render (Backend)
  deploy-backend:
    needs: [backend-ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.service-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set deployment environment
      id: set-env
      run: |
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "service-id=${{ secrets.RENDER_STAGING_SERVICE_ID }}" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "service-id=${{ secrets.RENDER_SERVICE_ID }}" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Render
      id: deploy
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ steps.set-env.outputs.service-id }}
        api-key: ${{ secrets.RENDER_API_KEY }}

    - name: Health check
      run: |
        echo "Waiting for service to be ready..."
        sleep 30
        SERVICE_URL="${{ steps.deploy.outputs.service-url }}"
        if curl -f "$SERVICE_URL/health" > /dev/null 2>&1; then
          echo "✅ Service is healthy"
        else
          echo "❌ Service health check failed"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          const environment = '${{ steps.set-env.outputs.environment }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${status} Backend deployed to ${environment} successfully! Service URL: ${{ steps.deploy.outputs.service-url }}`
          })

  # Deploy to Vercel (Frontend)
  deploy-frontend:
    needs: [frontend-ci]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.preview-url }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set deployment environment
      id: set-env
      run: |
        if [ "${{ github.event.inputs.environment }}" = "staging" ]; then
          echo "environment=staging" >> $GITHUB_OUTPUT
          echo "vercel-args=--prod=false" >> $GITHUB_OUTPUT
        else
          echo "environment=production" >> $GITHUB_OUTPUT
          echo "vercel-args=--prod" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to Vercel
      id: deploy
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ${{ env.FRONTEND_DIR }}
        vercel-args: ${{ steps.set-env.outputs.vercel-args }}

    - name: Notify deployment status
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
          const environment = '${{ steps.set-env.outputs.environment }}';
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `${status} Frontend deployed to ${environment} successfully! Preview URL: ${{ steps.deploy.outputs.preview-url }}`
          })

  # Rollback job (manual trigger)
  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    environment: production
    
    steps:
    - name: Rollback Backend
      uses: johnbeynon/render-deploy-action@v0.0.8
      with:
        service-id: ${{ secrets.RENDER_SERVICE_ID }}
        api-key: ${{ secrets.RENDER_API_KEY }}
        rollback: true

    - name: Rollback Frontend
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ${{ env.FRONTEND_DIR }}
        vercel-args: '--prod --force'
